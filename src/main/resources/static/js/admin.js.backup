// Verificar autenticación
function verificarAuth() {
    const userRole = localStorage.getItem('userRole');
    const userName = localStorage.getItem('userName');
    
    if (!userName || userRole !== 'Administrador') {
        window.location.href = '/index.html';
        return;
    }
    console.log('Usuario autenticado:', userName, 'Rol:', userRole);
}

// Función de logout
function logout() {
    localStorage.removeItem('userId');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('userName');
    localStorage.removeItem('userRole');
    window.location.href = '/index.html';
}

// Funciones para mostrar/ocultar formularios
function mostrarFormularioUsuario() {
    document.getElementById('formulario-usuario').style.display = 'block';
}

function mostrarFormularioMateria() {
    document.getElementById('formulario-materia').style.display = 'block';
}

function mostrarFormularioCategoria() {
    document.getElementById('formulario-categoria').style.display = 'block';
}

// Funciones para cargar datos
async function cargarUsuarios() {
    try {
        const usuarios = await api.getUsers();
        const tabla = document.getElementById('usuarios-tabla');
        tabla.innerHTML = '';
        
        usuarios.forEach(usuario => {
            tabla.innerHTML += `
                <tr>
                    <td>${usuario.correo}</td>
                    <td>${usuario.rol}</td>
                    <td>${usuario.nombre}</td>
                    <td>${usuario.correo}</td>
                    <td>
                        <button class="btn-edit" onclick="editarUsuario(${usuario.id})">Editar</button>
                        <button class="btn-delete" onclick="eliminarUsuario(${usuario.id})">Eliminar</button>
                    </td>
                </tr>
            `;
        });
    } catch (error) {
        console.error('Error cargando usuarios:', error);
        alert('Error al cargar usuarios');
    }
}

async function cargarMaterias() {
    try {
        const materias = await api.getMaterias();
        const tabla = document.getElementById('materias-tabla');
        tabla.innerHTML = '';
        
        materias.forEach(materia => {
            tabla.innerHTML += `
                <tr>
                    <td>${materia.nombre}</td>
                    <td>${materia.categoria ? materia.categoria.nombre : 'Sin categoría'}</td>
                    <td>
                        <button class="btn-edit" onclick="editarMateria(${materia.id})">Editar</button>
                        <button class="btn-delete" onclick="eliminarMateria(${materia.id})">Eliminar</button>
                    </td>
                </tr>
            `;
        });
    } catch (error) {
        console.error('Error cargando materias:', error);
        alert('Error al cargar materias');
    }
}

async function cargarCategorias() {
    try {
        const categorias = await api.getCategorias();
        const tabla = document.getElementById('categorias-tabla');
        tabla.innerHTML = '';
        
        categorias.forEach(categoria => {
            tabla.innerHTML += `
                <tr>
                    <td>${categoria.nombre}</td>
                    <td>
                        <button class="btn-edit" onclick="editarCategoria(${categoria.id})">Editar</button>
                        <button class="btn-delete" onclick="eliminarCategoria(${categoria.id})">Eliminar</button>
                    </td>
                </tr>
            `;
        });

        // También actualizar el select de categorías en el formulario de materias
        const select = document.getElementById('categoriaMateria');
        select.innerHTML = '<option value="">Seleccione categoría</option>';
        categorias.forEach(categoria => {
            select.innerHTML += `<option value="${categoria.id}">${categoria.nombre}</option>`;
        });
    } catch (error) {
        console.error('Error cargando categorías:', error);
        alert('Error al cargar categorías');
    }
}

// Funciones para eliminar
async function eliminarUsuario(id) {
    if (!confirm('¿Está seguro de que desea eliminar este usuario?')) {
        return;
    }
    
    try {
        await api.deleteUser(id);
        alert('Usuario eliminado exitosamente');
        cargarUsuarios();
    } catch (error) {
        console.error('Error eliminando usuario:', error);
        alert('Error al eliminar usuario: ' + error.message);
    }
}

async function eliminarMateria(id) {
    try {
        const materia = await api.getMateria(id);
        if (!materia) {
            alert('Materia no encontrada');
            return;
        }
        
        const mensaje = `¿Está seguro de que desea eliminar la materia "${materia.nombre}"?\n\n` +
                       `ADVERTENCIA: Esta acción eliminará también todo el contenido asociado ` +
                       `(contenidos, foros, evaluaciones, etc.)`;
        
        if (!confirm(mensaje)) {
            return;
        }
        
        await api.deleteMateria(id);
        alert('Materia eliminada exitosamente');
        cargarMaterias();
    } catch (error) {
        console.error('Error eliminando materia:', error);
        alert('Error al eliminar materia: ' + error.message);
    }
}

async function eliminarCategoria(id) {
    try {
        // Primero obtener la categoría para verificar si tiene materias
        const categoria = await api.getCategoria(id);
        if (!categoria) {
            alert('Categoría no encontrada');
            return;
        }
        
        // Obtener todas las materias para contar cuántas tienen esta categoría
        const materias = await api.getMaterias();
        const materiasConCategoria = materias.filter(m => m.categoria && m.categoria.id === id);
        
        let mensaje = '¿Está seguro de que desea eliminar esta categoría?';
        if (materiasConCategoria.length > 0) {
            mensaje = `ADVERTENCIA: Esta categoría tiene ${materiasConCategoria.length} materia(s) asociada(s).\n\n` +
                      `No se puede eliminar una categoría con materias asociadas.\n` +
                      `Por favor, reasigne o elimine las materias primero.\n\n` +
                      `Materias: ${materiasConCategoria.map(m => m.nombre).join(', ')}`;
            alert(mensaje);
            return;
        }
        
        if (!confirm(mensaje)) {
            return;
        }
        
        await api.deleteCategoria(id);
        alert('Categoría eliminada exitosamente');
        cargarCategorias();
        cargarMaterias(); // Recargar materias por si alguna tenía esta categoría
    } catch (error) {
        console.error('Error eliminando categoría:', error);
        alert('Error al eliminar categoría: ' + error.message);
    }
}

// Funciones para editar
async function editarUsuario(id) {
    try {
        const usuario = await api.getUser(id);
        if (!usuario) {
            alert('Usuario no encontrado');
            return;
        }
        
        const nuevoNombre = prompt('Nombre:', usuario.nombre);
        if (nuevoNombre === null) return; // Cancelado
        
        const nuevoCorreo = prompt('Correo:', usuario.correo);
        if (nuevoCorreo === null) return;
        
        if (!nuevoNombre.trim() || !nuevoCorreo.trim()) {
            alert('Los campos no pueden estar vacíos');
            return;
        }
        
        const userData = {
            nombre: nuevoNombre,
            correo: nuevoCorreo,
            contrasena: usuario.contrasena,
            rol: usuario.rol
        };
        
        await api.updateUser(id, userData);
        alert('Usuario actualizado exitosamente');
        cargarUsuarios();
    } catch (error) {
        console.error('Error editando usuario:', error);
        alert('Error al editar usuario: ' + error.message);
    }
}

async function editarMateria(id) {
    try {
        const materia = await api.getMateria(id);
        if (!materia) {
            alert('Materia no encontrada');
            return;
        }
        
        const nuevoNombre = prompt('Nombre de la materia:', materia.nombre);
        if (nuevoNombre === null) return; // Cancelado
        
        // Obtener categorías para mostrar opciones
        const categorias = await api.getCategorias();
        let mensaje = 'Seleccione el ID de la categoría:\n';
        categorias.forEach(cat => {
            mensaje += `${cat.id}: ${cat.nombre}\n`;
        });
        
        const nuevaCategoriaId = prompt(mensaje, materia.categoria ? materia.categoria.id : '');
        if (nuevaCategoriaId === null) return;
        
        const materiaData = {
            nombre: nuevoNombre,
            categoria: {
                id: parseInt(nuevaCategoriaId)
            }
        };
        
        await api.updateMateria(id, materiaData);
        alert('Materia actualizada exitosamente');
        cargarMaterias();
    } catch (error) {
        console.error('Error editando materia:', error);
        alert('Error al editar materia: ' + error.message);
    }
}

async function editarCategoria(id) {
    try {
        const categoria = await api.getCategoria(id);
        if (!categoria) {
            alert('Categoría no encontrada');
            return;
        }
        
        const nuevoNombre = prompt('Nombre de la categoría:', categoria.nombre);
        if (nuevoNombre === null) return; // Cancelado
        
        if (!nuevoNombre.trim()) {
            alert('El nombre no puede estar vacío');
            return;
        }
        
        await api.updateCategoria(id, { nombre: nuevoNombre });
        alert('Categoría actualizada exitosamente');
        cargarCategorias();
        cargarMaterias(); // Recargar materias para mostrar el nombre actualizado de la categoría
    } catch (error) {
        console.error('Error editando categoría:', error);
        alert('Error al editar categoría: ' + error.message);
    }
}

// Event Listeners para los formularios
document.addEventListener('DOMContentLoaded', () => {
    verificarAuth();
    cargarUsuarios();
    cargarMaterias();
    cargarCategorias();
    cargarReportes(); // Cargar reportes al inicio

    // Formulario de Usuario
    document.getElementById('userForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const userData = {
            tipo: document.getElementById('userType').value,
            nombre: document.getElementById('nombre').value,
            correo: document.getElementById('correo').value,
            contrasena: document.getElementById('contrasena').value
        };

        try {
            await api.createUser(userData);
            alert('Usuario creado exitosamente');
            document.getElementById('userForm').reset();
            document.getElementById('formulario-usuario').style.display = 'none';
            cargarUsuarios();
        } catch (error) {
            console.error('Error creando usuario:', error);
            alert('Error al crear usuario');
        }
    });

    // Formulario de Materia
    document.getElementById('materiaForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const materiaData = {
            nombre: document.getElementById('nombreMateria').value,
            categoria: {
                id: parseInt(document.getElementById('categoriaMateria').value)
            }
        };

        try {
            await api.createMateria(materiaData);
            alert('Materia creada exitosamente');
            document.getElementById('materiaForm').reset();
            document.getElementById('formulario-materia').style.display = 'none';
            cargarMaterias();
        } catch (error) {
            console.error('Error creando materia:', error);
            alert('Error al crear materia');
        }
    });

    // Formulario de Categoría
    document.getElementById('categoriaForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const categoriaData = {
            nombre: document.getElementById('nombreCategoria').value
        };

        try {
            await api.createCategoria(categoriaData);
            alert('Categoría creada exitosamente');
            document.getElementById('categoriaForm').reset();
            document.getElementById('formulario-categoria').style.display = 'none';
            cargarCategorias();
        } catch (error) {
            console.error('Error creando categoría:', error);
            alert('Error al crear categoría');
        }
    });
});
// ==================== GESTIÓN DE REPORTES ====================

let reportesCache = [];
let reporteActual = null;
let filtroActual = 'todos';

// Cargar todos los reportes
async function cargarReportes() {
    try {
        const reportes = await api.getReportes();
        reportesCache = reportes;
        actualizarContadores();
        filtrarReportes(filtroActual);
    } catch (error) {
        console.error('Error cargando reportes:', error);
        alert('Error al cargar reportes');
    }
}

// Actualizar contadores de badges
function actualizarContadores() {
    const pendientes = reportesCache.filter(r => r.estado === 'Pendiente').length;
    const revision = reportesCache.filter(r => r.estado === 'En Revisión').length;
    const resueltos = reportesCache.filter(r => r.estado === 'Resuelto').length;
    const rechazados = reportesCache.filter(r => r.estado === 'Rechazado').length;
    const todos = reportesCache.length;

    document.getElementById('count-todos').textContent = todos;
    document.getElementById('count-pendientes').textContent = pendientes;
    document.getElementById('count-revision').textContent = revision;
    document.getElementById('count-resueltos').textContent = resueltos;
    document.getElementById('count-rechazados').textContent = rechazados;
}

// Filtrar reportes por estado
function filtrarReportes(estado) {
    filtroActual = estado;
    
    // Actualizar botones activos
    document.querySelectorAll('.filtro-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    if (event && event.target) {
        event.target.classList.add('active');
    }

    // Filtrar reportes
    let reportesFiltrados = reportesCache;
    if (estado !== 'todos') {
        reportesFiltrados = reportesCache.filter(r => r.estado === estado);
    }

    mostrarReportes(reportesFiltrados);
}

// Mostrar reportes en el contenedor
function mostrarReportes(reportes) {
    const container = document.getElementById('reportes-container');
    const noReportes = document.getElementById('no-reportes');

    if (reportes.length === 0) {
        if (noReportes) {
            noReportes.style.display = 'block';
        }
        container.innerHTML = '<p class=\"no-data\" id=\"no-reportes\">No hay reportes para mostrar</p>';
        return;
    }

    if (noReportes) {
        noReportes.style.display = 'none';
    }
    container.innerHTML = '';

    reportes.forEach(reporte => {
        const card = document.createElement('div');
        card.className = 'reporte-card';
        card.onclick = () => mostrarDetalleReporte(reporte.id);

        const estadoBadge = getEstadoBadgeClass(reporte.estado);
        
        card.innerHTML = 
            <div class=\"reporte-header\">
                <span class=\"reporte-id\">Reporte #+${reporte.id}</span>
                <span class=\"badge +${estadoBadge}\">+${reporte.estado}</span>
            </div>
            <div class=\"reporte-info\">
                <p><strong>Reportado por:</strong> +${reporte.usuario.nombre} (+${reporte.usuario.correo})</p>
                <p><strong>Contenido:</strong> +${reporte.contenido.titulo}</p>
                <p><strong>Motivo:</strong> +${reporte.motivo}</p>
            </div>
        ;

        container.appendChild(card);
    });
}

// Obtener clase CSS para el badge según el estado
function getEstadoBadgeClass(estado) {
    switch (estado) {
        case 'Pendiente':
            return 'badge-warning';
        case 'En Revisión':
            return 'badge-info';
        case 'Resuelto':
            return 'badge-success';
        case 'Rechazado':
            return 'badge-danger';
        default:
            return '';
    }
}

// Mostrar detalles del reporte en modal
async function mostrarDetalleReporte(reporteId) {
    try {
        const reporte = reportesCache.find(r => r.id === reporteId);
        if (!reporte) {
            alert('Reporte no encontrado');
            return;
        }

        reporteActual = reporte;

        // Llenar los datos del modal
        document.getElementById('detalle-id').textContent = reporte.id;
        document.getElementById('detalle-estado').textContent = reporte.estado;
        document.getElementById('detalle-estado').className = adge +${getEstadoBadgeClass(reporte.estado)};
        document.getElementById('detalle-usuario').textContent = ${reporte.usuario.nombre} ();
        document.getElementById('detalle-motivo').textContent = reporte.motivo;

        // Información del contenido
        document.getElementById('detalle-contenido-titulo').textContent = reporte.contenido.titulo;
        document.getElementById('detalle-contenido-tipo').textContent = reporte.contenido.tipo || 'No especificado';
        document.getElementById('detalle-contenido-descripcion').textContent = reporte.contenido.descripcion || 'Sin descripción';
        document.getElementById('detalle-contenido-materia').textContent = reporte.contenido.materia?.nombre || 'Sin materia';

        // Seleccionar el estado actual
        document.getElementById('select-estado').value = reporte.estado;

        // Mostrar modal
        document.getElementById('modal-detalle-reporte').style.display = 'flex';
    } catch (error) {
        console.error('Error mostrando detalles del reporte:', error);
        alert('Error al mostrar detalles del reporte');
    }
}

// Cerrar modal de detalles
function cerrarModalDetalleReporte() {
    document.getElementById('modal-detalle-reporte').style.display = 'none';
    reporteActual = null;
}

// Cambiar estado del reporte
async function cambiarEstadoReporte() {
    if (!reporteActual) {
        alert('No hay reporte seleccionado');
        return;
    }

    const nuevoEstado = document.getElementById('select-estado').value;
    
    if (nuevoEstado === reporteActual.estado) {
        alert('El estado seleccionado es el mismo que el actual');
        return;
    }

    if (!confirm(¿Está seguro de cambiar el estado a \"+${nuevoEstado}\"?)) {
        return;
    }

    try {
        await api.cambiarEstadoReporte(reporteActual.id, nuevoEstado);
        alert('Estado actualizado exitosamente');
        cerrarModalDetalleReporte();
        cargarReportes();
    } catch (error) {
        console.error('Error cambiando estado:', error);
        alert('Error al cambiar estado del reporte');
    }
}

// Descargar contenido reportado
async function descargarContenidoReportado() {
    if (!reporteActual) {
        alert('No hay reporte seleccionado');
        return;
    }

    const contenido = reporteActual.contenido;
    if (!contenido.archivoUrl) {
        alert('Este contenido no tiene archivo para descargar');
        return;
    }

    try {
        // Crear un enlace temporal para descargar
        const link = document.createElement('a');
        link.href = http://localhost:8080/+${contenido.archivoUrl};
        link.download = contenido.titulo;
        link.target = '_blank';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('Error descargando contenido:', error);
        alert('Error al descargar contenido');
    }
}

// Eliminar contenido reportado
async function eliminarContenidoReportado() {
    if (!reporteActual) {
        alert('No hay reporte seleccionado');
        return;
    }

    const mensaje = ¿Está seguro de que desea eliminar el contenido \"+${reporteActual.contenido.titulo}\"?\n\n +
                   ADVERTENCIA: Esta acción es irreversible y eliminará el contenido permanentemente.;
    
    if (!confirm(mensaje)) {
        return;
    }

    try {
        await api.deleteContenido(reporteActual.contenido.id);
        alert('Contenido eliminado exitosamente');
        
        // Cambiar el estado del reporte a \"Resuelto\" automáticamente
        await api.cambiarEstadoReporte(reporteActual.id, 'Resuelto');
        
        cerrarModalDetalleReporte();
        cargarReportes();
    } catch (error) {
        console.error('Error eliminando contenido:', error);
        alert('Error al eliminar contenido: ' + error.message);
    }
}

// Eliminar reporte actual
async function eliminarReporteActual() {
    if (!reporteActual) {
        alert('No hay reporte seleccionado');
        return;
    }

    const mensaje = ¿Está seguro de que desea eliminar el reporte #+${reporteActual.id}?\n\n +
                   NOTA: Esto no eliminará el contenido reportado, solo el reporte mismo.;
    
    if (!confirm(mensaje)) {
        return;
    }

    try {
        await api.deleteReporte(reporteActual.id);
        alert('Reporte eliminado exitosamente');
        cerrarModalDetalleReporte();
        cargarReportes();
    } catch (error) {
        console.error('Error eliminando reporte:', error);
        alert('Error al eliminar reporte: ' + error.message);
    }
}
